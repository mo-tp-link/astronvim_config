-- This method was used for kickstart project and seems not a good setup
return {
  -- "neovim/nvim-lspconfig",
  -- dependencies = {
  --   { "williamboman/mason.nvim" },
  --   { "williamboman/mason-lspconfig.nvim" },
  -- },
  -- config = function()
  --   local lspconfig = require "lspconfig"
  --   local util = require "lspconfig.util"
  --
  --   local lsp_flags = {
  --     allow_incremental_sync = true,
  --     debounce_text_changes = 150,
  --   }
  --
  --   local capabilities = require("blink.cmp").get_lsp_capabilities({}, true)
  --
  --   lspconfig.marksman.setup {
  --     capabilities = capabilities,
  --     filetypes = { "markdown", "quarto" },
  --     root_dir = util.root_pattern(".git", ".marksman.toml", "_quarto.yml"),
  --   }
  --
  --   local function get_quarto_resource_path()
  --     local function strsplit(s, delimiter)
  --       local result = {}
  --       for match in (s .. delimiter):gmatch("(.-)" .. delimiter) do
  --         table.insert(result, match)
  --       end
  --       return result
  --     end
  --
  --     local f = assert(io.popen("quarto --paths", "r"))
  --     local s = assert(f:read "*a")
  --     f:close()
  --     return strsplit(s, "\n")[2]
  --   end
  --
  --   local lua_library_files = vim.api.nvim_get_runtime_file("", true)
  --   local lua_plugin_paths = {}
  --   local resource_path = get_quarto_resource_path()
  --   if resource_path == nil then
  --     vim.notify_once "quarto not found, lua library files not loaded"
  --   else
  --     table.insert(lua_library_files, resource_path .. "/lua-types")
  --     table.insert(lua_plugin_paths, resource_path .. "/lua-plugin/plugin.lua")
  --   end
  --
  --   -- See https://github.com/neovim/neovim/issues/23291
  --   -- disable lsp watcher.
  --   -- Too lags on linux for python projects
  --   -- because pyright and nvim both create too many watchers otherwise
  --   if capabilities.workspace == nil then
  --     capabilities.workspace = {}
  --     capabilities.workspace.didChangeWatchedFiles = {}
  --   end
  --   capabilities.workspace.didChangeWatchedFiles.dynamicRegistration = false
  --
  --   lspconfig.pyright.setup {
  --     capabilities = capabilities,
  --     flags = lsp_flags,
  --     settings = {
  --       python = {
  --         analysis = {
  --           autoSearchPaths = true,
  --           useLibraryCodeForTypes = true,
  --           diagnosticMode = "workspace",
  --         },
  --       },
  --     },
  --     root_dir = function(fname)
  --       return util.root_pattern(".git", "setup.py", "setup.cfg", "pyproject.toml", "requirements.txt")(fname)
  --     end,
  --   }
  -- end,
}
